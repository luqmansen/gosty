// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/luqmansen/gosty/pkg/apiserver/models"
)

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVideoRepository) Add(video *models.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockVideoRepositoryMockRecorder) Add(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVideoRepository)(nil).Add), video)
}

// AddMany mocks base method.
func (m *MockVideoRepository) AddMany(videoList []*models.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMany", videoList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMany indicates an expected call of AddMany.
func (mr *MockVideoRepositoryMockRecorder) AddMany(videoList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockVideoRepository)(nil).AddMany), videoList)
}

// Delete mocks base method.
func (m *MockVideoRepository) Delete(videoId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", videoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVideoRepositoryMockRecorder) Delete(videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVideoRepository)(nil).Delete), videoId)
}

// Find mocks base method.
func (m *MockVideoRepository) Find(key string) []*models.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", key)
	ret0, _ := ret[0].([]*models.Video)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockVideoRepositoryMockRecorder) Find(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVideoRepository)(nil).Find), key)
}

// Get mocks base method.
func (m *MockVideoRepository) Get(videoId uint) models.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", videoId)
	ret0, _ := ret[0].(models.Video)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockVideoRepositoryMockRecorder) Get(videoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVideoRepository)(nil).Get), videoId)
}

// GetAvailable mocks base method.
func (m *MockVideoRepository) GetAvailable(limit int64) ([]*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailable", limit)
	ret0, _ := ret[0].([]*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailable indicates an expected call of GetAvailable.
func (mr *MockVideoRepositoryMockRecorder) GetAvailable(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailable", reflect.TypeOf((*MockVideoRepository)(nil).GetAvailable), limit)
}

// GetOneByName mocks base method.
func (m *MockVideoRepository) GetOneByName(key string) (*models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByName", key)
	ret0, _ := ret[0].(*models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByName indicates an expected call of GetOneByName.
func (mr *MockVideoRepositoryMockRecorder) GetOneByName(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByName", reflect.TypeOf((*MockVideoRepository)(nil).GetOneByName), key)
}

// Update mocks base method.
func (m *MockVideoRepository) Update(video *models.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVideoRepositoryMockRecorder) Update(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideoRepository)(nil).Update), video)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskRepository) Add(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTaskRepositoryMockRecorder) Add(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskRepository)(nil).Add), task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(taskId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), taskId)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(taskId string) models.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", taskId)
	ret0, _ := ret[0].(models.Task)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), taskId)
}

// GetAll mocks base method.
func (m *MockTaskRepository) GetAll(limit int64) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskRepositoryMockRecorder) GetAll(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskRepository)(nil).GetAll), limit)
}

// GetOneByVideoNameAndKind mocks base method.
func (m *MockTaskRepository) GetOneByVideoNameAndKind(name string, kind models.TaskKind) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByVideoNameAndKind", name, kind)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByVideoNameAndKind indicates an expected call of GetOneByVideoNameAndKind.
func (mr *MockTaskRepositoryMockRecorder) GetOneByVideoNameAndKind(name, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByVideoNameAndKind", reflect.TypeOf((*MockTaskRepository)(nil).GetOneByVideoNameAndKind), name, kind)
}

// GetTranscodeTasksByVideoNameAndResolution mocks base method.
func (m *MockTaskRepository) GetTranscodeTasksByVideoNameAndResolution(name, resolution string) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscodeTasksByVideoNameAndResolution", name, resolution)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranscodeTasksByVideoNameAndResolution indicates an expected call of GetTranscodeTasksByVideoNameAndResolution.
func (mr *MockTaskRepositoryMockRecorder) GetTranscodeTasksByVideoNameAndResolution(name, resolution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscodeTasksByVideoNameAndResolution", reflect.TypeOf((*MockTaskRepository)(nil).GetTranscodeTasksByVideoNameAndResolution), name, resolution)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), task)
}

// MockWorkerRepository is a mock of WorkerRepository interface.
type MockWorkerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerRepositoryMockRecorder
}

// MockWorkerRepositoryMockRecorder is the mock recorder for MockWorkerRepository.
type MockWorkerRepositoryMockRecorder struct {
	mock *MockWorkerRepository
}

// NewMockWorkerRepository creates a new mock instance.
func NewMockWorkerRepository(ctrl *gomock.Controller) *MockWorkerRepository {
	mock := &MockWorkerRepository{ctrl: ctrl}
	mock.recorder = &MockWorkerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerRepository) EXPECT() *MockWorkerRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWorkerRepository) Add(worker *models.Worker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", worker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockWorkerRepositoryMockRecorder) Add(worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWorkerRepository)(nil).Add), worker)
}

// Delete mocks base method.
func (m *MockWorkerRepository) Delete(workerId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", workerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkerRepositoryMockRecorder) Delete(workerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkerRepository)(nil).Delete), workerId)
}

// Get mocks base method.
func (m *MockWorkerRepository) Get(workerId uint) models.Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", workerId)
	ret0, _ := ret[0].(models.Worker)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockWorkerRepositoryMockRecorder) Get(workerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkerRepository)(nil).Get), workerId)
}

// GetAll mocks base method.
func (m *MockWorkerRepository) GetAll(limit int64) ([]*models.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit)
	ret0, _ := ret[0].([]*models.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWorkerRepositoryMockRecorder) GetAll(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWorkerRepository)(nil).GetAll), limit)
}

// Upsert mocks base method.
func (m *MockWorkerRepository) Upsert(worker *models.Worker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", worker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockWorkerRepositoryMockRecorder) Upsert(worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockWorkerRepository)(nil).Upsert), worker)
}
