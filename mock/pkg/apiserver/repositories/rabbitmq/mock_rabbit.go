// Code generated by MockGen. DO NOT EDIT.
// Source: messaging.go

// Package mock_rabbit is a generated GoMock package.
package mock_rabbitmq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageBrokerRepository is a mock of MessageBrokerRepository interface.
type MockMessageBrokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerRepositoryMockRecorder
}

// MockMessageBrokerRepositoryMockRecorder is the mock recorder for MockMessageBrokerRepository.
type MockMessageBrokerRepositoryMockRecorder struct {
	mock *MockMessageBrokerRepository
}

// NewMockMessageBrokerRepository creates a new mock instance.
func NewMockMessageBrokerRepository(ctrl *gomock.Controller) *MockMessageBrokerRepository {
	mock := &MockMessageBrokerRepository{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBrokerRepository) EXPECT() *MockMessageBrokerRepositoryMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMessageBrokerRepository) Publish(data interface{}, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", data, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageBrokerRepositoryMockRecorder) Publish(data, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessageBrokerRepository)(nil).Publish), data, queueName)
}

// ReadMessage mocks base method.
func (m *MockMessageBrokerRepository) ReadMessage(res chan<- interface{}, queueName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadMessage", res, queueName)
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockMessageBrokerRepositoryMockRecorder) ReadMessage(res, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockMessageBrokerRepository)(nil).ReadMessage), res, queueName)
}
