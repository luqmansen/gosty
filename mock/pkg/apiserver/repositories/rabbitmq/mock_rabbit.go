// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apiserver/repositories/messaging.go

// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMessenger) Publish(data interface{}, queueName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", data, queueName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessengerMockRecorder) Publish(data, queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessenger)(nil).Publish), data, queueName)
}

// ReadMessage mocks base method.
func (m *MockMessenger) ReadMessage(result chan<- interface{}, queueName string, setQos bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadMessage", result, queueName, setQos)
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockMessengerMockRecorder) ReadMessage(result, queueName, setQos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockMessenger)(nil).ReadMessage), result, queueName, setQos)
}

// ResourcesWatcher mocks base method.
func (m *MockMessenger) ResourcesWatcher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResourcesWatcher")
}

// ResourcesWatcher indicates an expected call of ResourcesWatcher.
func (mr *MockMessengerMockRecorder) ResourcesWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesWatcher", reflect.TypeOf((*MockMessenger)(nil).ResourcesWatcher))
}
