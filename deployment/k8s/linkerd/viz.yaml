---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQVBmZHA5MTUzaUduc1JrcTl5cUZ2bnN3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBME1ERXhOekkzTlRKYQpGdzB5TWpBME1ERXhOekkzTlRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLYktpV1lSUnpQL3MyQjF6dEs2VXMKMHFNOUtxZ2YrUEplcEZUQ1V6NzVZc0NZK1VXODlpMHJMYnpvSnExMVV6N254Vm5aVHZ4WXZMUVhBcVFCREE4LwpKTXFkM1NiK045Mm0yaEFWV2lkS2x3UENrYmgxcGlNNnM3ekhCZVNPSHlRVlFicDJnNVQxNUNsTFZBTXArbnhECkxnQWs2amlJZ3k4ZE11R1k1T3NsYlY0MUs4NjhQc0trYjV2RVZDZmVuVTJjdlVtcWc5RU42M2xxQUVrM3BEZFkKOXpTaWpicVhjcURBZlIzeUE0bTk3NGRleSs2eWwzR2Q4U0tNUCs4RkNFS1B2RnplVmNmcEk1M2ZWa2JVeGlYcAprR0I5OGUyd0E5TTFQaEM4RkhBZkFKeU9iZkY3Z0lvWjhrMUJkT2NvOWZLZW9jN09pK3Boa1RKS3V2MlB4UXpWCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2YvOWFzSWhjbzN6VUhVVW9INmU1c1dBZ1FJUjBtCkkzUlA1Zi8xblVGZllPc3h1cFN2YVN0UFlidXRzYmtNZXNhdW0zN281ZnlySTBpUkU2Ynh0R1VHVTlqYkFBaWQKUlo2TGUwa1VkWVpOQlJLUENreURVVUpoa0NDMW9XVEQ1bDFXdDJvb2NFbUwxb1o3RVFYbm9teUxCRjFVRUxsdwphMnA4MXJRWU1zTzAybXZvYnZnYzZHK3BrT24zYlNiRXZRZWl2a2tSWE15ZXQ0TmJCbll5cnlWVy9GNzFjKytOCmFWK2FXdjNtQTZESlEvS0MvdUJxVmdmay9QSHBxc0o5LzRZc1RFcEQrdVhXY09HUzd1OFBPYWQzeVJRam1Mc1gKZE00TWoxdVh6Q3IxUUdRWHVuZGtPaElDV2NNbUJHaHFoL3ZMNVl4Uy9yWWFicDlJek9XSDNnQysKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeW15b2xtRVVjei83TmdkYzdTdWxMTktqUFNxb0gvanlYcVJVd2xNKytXTEFtUGxGCnZQWXRLeTI4NkNhdGRWTSs1OFZaMlU3OFdMeTBGd0trQVF3UFB5VEtuZDBtL2pmZHB0b1FGVm9uU3BjRHdwRzQKZGFZak9yTzh4d1hramg4a0ZVRzZkb09VOWVRcFMxUURLZnA4UXk0QUpPbzRpSU12SFRMaG1PVHJKVzFlTlN2Twp2RDdDcEcrYnhGUW4zcDFObkwxSnFvUFJEZXQ1YWdCSk42UTNXUGMwb28yNmwzS2d3SDBkOGdPSnZlK0hYc3Z1CnNwZHhuZkVpakQvdkJRaENqN3hjM2xYSDZTT2QzMVpHMU1ZbDZaQmdmZkh0c0FQVE5UNFF2QlJ3SHdDY2ptM3gKZTRDS0dmSk5RWFRuS1BYeW5xSE96b3ZxWVpFeVNycjlqOFVNMVFJREFRQUJBb0lCQUJCYXpSZ3hTY1N5QTZydQoxMXcyTFljOGtZSE1vMzdKejFORU5iRHBwdW5oUjZ4VVg0VVA0c0JkVnFqdkR3NnVwaU4xdDNldVFRY3VYK0tJCkRSWWtra3JJdnpJWC95R0ZBL3lLRzhpTjJ5VFVwTElnc2VXWGdic3BjSFFvRHJwSTI5SjMyQWZoUTdUR05Xdm4Kb3NYT2ZpR3pZc0dZeHU2SW90TGFISTRNMk03U0xYbXE1Wk9JQkJnNm1RRVZDdW9KZ09uczlXYmNTbStTY2E0cQprUWhsOFFxcHhFWitCVWNDbm16clRQMEovclcyY0U0cTBCQnA4TXVTL1YzM05jdU1zS0Y4djVJVjVlU0NOQzVRCnQwdHdQZ0g5U1ZuSDZveHQ5REd0Zy9YSjI5ekx1dXhCdEpodzgxcy9KMlp2TUJLSWx6WUhSSjFieUl4cExIS3YKZTFibWI0RUNnWUVBMlB6WGNmZnhmaTFXQWNKT1JKd29RSHR3azhzNmV0Ukx5R3BqNmZZV2wzekNlbDhhUlNESgo1RERjMFU5WkhKYlNjVG5uclJCVHl3anJJMUt3MjVpak9SRzVNeTRlWFc5akNPTm96V09YeE42b0IvR0hua3RuCnZQNkJ1emVaS3VObUxtV2hac0JRNFNObFcwMS9NZ0JYZmZrVDVYUk50Z1lXazRuZXpDSzhWYlVDZ1lFQTd0R0cKVjRaS3JMMHJuN3AzYUdlZHd5TTlYbExhRXl4NnBSK3puaHdKYTg4YzhZOTh3TERUZ01jTHJ3R1NtbXVSQmQ2NwowNkhnazVyaVJXRVVTT2hKTGlHTnVWWTRHQVlBOG85THVQYVlKRTZVY2xCLzlERmlxd3VUVGZYcDI2aVpJM2FQClN2UXBWaFlBQjN6Tm1tTTdnQ3Y4VGw1VlViSGpyNklwc1dJZVRxRUNnWUJOSjRKWDVPaTZpOVpFSTluK3JXUG0Kb2IzQzM0VjR2Vm9BOWt0Mm1ta29EbFY4ZTZwMG9CY0ppNUpJM3FUNTlHcjVsYlJhSmk4VlI2T01XTS9JRlhzYwpSTUFNZ2I2TVRKbnpSQ0UwdnMvdFVacC8wSkwvWnlLSTRob3cvckQ0dmdqTVFKam1WMFdxK0JJSEtBUXRQRS9mCjNCd0YvNWZPUEZYMHVoWTlrYkJUN1FLQmdDam1pWE9EOUZZUkw5OXpOL0FSanR0VXRiWHB5cDl1QnJNdzhyb3AKWXhPcnJQRlIrYk9tbFJLQkJHYzhoYmNjcFFHMFc4YXErcU5NNjJPbWRLcm4zV0NoTG55SFg2UDlvenZuZnJoMgp3eWUwcllmR2NhT0lzYlZKampqVDNQRlp0cUIwTmFaSW1xdTdxTldmY2piMnQ4SUR4bnBGZmFjNEtCNTBUMStwCnhqY0JBb0dBSDhqS0RydWJrUVFIMHZZRnYvd2xrcTJ2V3dReTVHR2dGSU10R1NFWWN3enNuYTFiMEQ4QXZJV3kKd2RXTERaSThYSWVWMHJsRlQwZ3U3cHg2Z3AremlFZmF5bjVPb05WNUJWZDZmV2p6dnpsN1ZVbmdLV28wTWpLdQpDaFdPT0ZBeGU4OGVTL0tkZWtqdktpY0Q5Z0d4dCt4TVNzTmp1eEtTOHVmSXVoS01SR1U9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQVBmZHA5MTUzaUduc1JrcTl5cUZ2bnN3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBME1ERXhOekkzTlRKYQpGdzB5TWpBME1ERXhOekkzTlRKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURLYktpV1lSUnpQL3MyQjF6dEs2VXMKMHFNOUtxZ2YrUEplcEZUQ1V6NzVZc0NZK1VXODlpMHJMYnpvSnExMVV6N254Vm5aVHZ4WXZMUVhBcVFCREE4LwpKTXFkM1NiK045Mm0yaEFWV2lkS2x3UENrYmgxcGlNNnM3ekhCZVNPSHlRVlFicDJnNVQxNUNsTFZBTXArbnhECkxnQWs2amlJZ3k4ZE11R1k1T3NsYlY0MUs4NjhQc0trYjV2RVZDZmVuVTJjdlVtcWc5RU42M2xxQUVrM3BEZFkKOXpTaWpicVhjcURBZlIzeUE0bTk3NGRleSs2eWwzR2Q4U0tNUCs4RkNFS1B2RnplVmNmcEk1M2ZWa2JVeGlYcAprR0I5OGUyd0E5TTFQaEM4RkhBZkFKeU9iZkY3Z0lvWjhrMUJkT2NvOWZLZW9jN09pK3Boa1RKS3V2MlB4UXpWCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2YvOWFzSWhjbzN6VUhVVW9INmU1c1dBZ1FJUjBtCkkzUlA1Zi8xblVGZllPc3h1cFN2YVN0UFlidXRzYmtNZXNhdW0zN281ZnlySTBpUkU2Ynh0R1VHVTlqYkFBaWQKUlo2TGUwa1VkWVpOQlJLUENreURVVUpoa0NDMW9XVEQ1bDFXdDJvb2NFbUwxb1o3RVFYbm9teUxCRjFVRUxsdwphMnA4MXJRWU1zTzAybXZvYnZnYzZHK3BrT24zYlNiRXZRZWl2a2tSWE15ZXQ0TmJCbll5cnlWVy9GNzFjKytOCmFWK2FXdjNtQTZESlEvS0MvdUJxVmdmay9QSHBxc0o5LzRZc1RFcEQrdVhXY09HUzd1OFBPYWQzeVJRam1Mc1gKZE00TWoxdVh6Q3IxUUdRWHVuZGtPaElDV2NNbUJHaHFoL3ZMNVl4Uy9yWWFicDlJek9XSDNnQysKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: d3166863cd53e27b35d70e63aa5a6ad587ee4bb2546390bb851a7e6c712ac456
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU1FZjlyWENTeU9aZWRWUWc1OGh6dW93RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMApNREV4TnpJM05USmFGdzB5TWpBME1ERXhOekkzTlRKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETGxxalE4OUhjR3pRSW5ETzQweUNLYjIxVmVOS2Q0cE1RcHovS1ovdWh3RCt1bDRZVm1KQVkzcTJ1TVFVMgo2MnBPUHFYRE5rZTFQQnlvWEhwT1Q2Tm9acVY5RElQWXVxOE43dXlra0d5eUNTMzdWZ3M4NGQxVHZ4WC9Vck1iCnB6bkZyZG9oOFl4MVRVZTc3VzJzWldKQ0x5alRFbUZNaU9Rb1F2bVMwK0tTT081L0YvemQxV3h6Q25KNVVLWnEKeXpCZXNvakNDYWhZWVJTRUdoNDE3S1diSFhiWVgwaVV1SmY0a05RckFNWUlMWnB6RHc3MFl4b2JhMDlUQWRnMQozaEdINEVFV0RpUWNReVMya2wwUFpHV2xGanJ4OG4ydFdNK1hDbUZCS3IzWmw5S1hSMkRSOXlEUXpoVTJTM080CmFpR0E0cGpLbkRKSk10VmxLOURjNGkvbEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURKanYzSzdNZDRqcTQ2TzBjUXczU0ZnbitpZ0ViRXNYTTZJRmlLNlpkaHMxRCt4L0lFYllvMWxnVzIKS3JzRW1pSWRvNThQb0R0a1g5RjBTZ0ZpVEQ2aUJYdEpVOHFoSjVRbUV6dUQzT3U2YnZ2bGYzTUtVY2txa0tkNgpnUDZ2MmJ0WnBzMWJEbm9mS2ZsM3NDM0tZa3Y2QWc3UUpMQk10OXBxRW82SlJmdVBLajgycFlSd2IzUGxPQ3dNCnR1VUwxUEEzM0RkL3JhaE9EVnNuSnpzNWtkM3AwcDZXN21uM1dxSVRDSFpCSitWU3R6azVBdFRQNElmRlNya0wKNVdJSGFzL1pKKy9XdUQwQ2hEWnFUM0lrNHBXYlpGaFBKUVdGdmNpMkFrSFY5Zmd5TDlhMzMzR0tObklhUjIycwpTNnZiMml6R3EreUg3cDRoL04ybk5MSTBSVVNmCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeTVhbzBQUFIzQnMwQ0p3enVOTWdpbTl0VlhqU25lS1RFS2MveW1mN29jQS9ycGVHCkZaaVFHTjZ0cmpFRk51dHFUajZsd3paSHRUd2NxRng2VGsramFHYWxmUXlEMkxxdkRlN3NwSkJzc2drdCsxWUwKUE9IZFU3OFYvMUt6RzZjNXhhM2FJZkdNZFUxSHUrMXRyR1ZpUWk4bzB4SmhUSWprS0VMNWt0UGlramp1ZnhmOAozZFZzY3dweWVWQ21hc3N3WHJLSXdnbW9XR0VVaEJvZU5leWxteDEyMkY5SWxMaVgrSkRVS3dER0NDMmFjdzhPCjlHTWFHMnRQVXdIWU5kNFJoK0JCRmc0a0hFTWt0cEpkRDJSbHBSWTY4Zko5clZqUGx3cGhRU3E5MlpmU2wwZGcKMGZjZzBNNFZOa3R6dUdvaGdPS1l5cHd5U1RMVlpTdlEzT0l2NVFJREFRQUJBb0lCQURBMWtlNUEvbDN2dHllZQp6WVNqd2gzbCt1NzFlSEpZdDlpR3NrMWN5REpxVXVvbUNXTk55RG1MYVhkSk5tSGw1enQyREV5b3F0eFl5clIzCmlhTEhxdnRLNno4c1dvQlUzS1VoQWJxS1ZLTG9GNUpmc3JPTkRKc0xNY3RQS3dpT1ZkamdyVG5DZUM5Q3lJelEKMFZxMGUwc08zY3oxbWtMRVc3ckkrVTV5akVGeGV3OVVMZDhlYzdabXFsQ1JpU21oMHY1OGtiNGwwVERyYVVaUwpmQWlhYm1JOWM2VXRmNDd6aUZPUTEzZGtaTjNKeGNsSngvaklDYmRCNVlWVm1mWUpJTFF0YmlhdG0xejhTZE94CndsVjBULzFxM1lRYkJUV2VwQmd0Skg5ODlmOVdsSHlIR0dCVStNdVVGTndaejlQRVhIRnBiclo5OXdCNEVla0MKam13V3BjRUNnWUVBek9OVFZmVTQvSERsT2d4NE9lRXJRU1FuOVhQRmJXczJlZ3hTbmo4UURmYnV3eitPaTVFcgpjT1NrMWoxamltSFBqNjFDWHhEb0t2bTc0VVhlMmx3KzZYVmh4ZzVzMGNpaEFYOVJ5dXBGTEw0Z2ErWnQ4b2JrClNiOFNVamkvdFZqYUtlRVMxb0xnQVJheFlHc09NUS9MNTU4Q1Z4T0xDOFhGRDFDZUFoL3JKbEVDZ1lFQS9tQlkKa1VjUHNuMUR2aFp4T3VIVUhnR0ZyQjdJTlZheWdvMmZ0TE5GTVhBb05EejJ1NVo2bTA1dUdEZ0RWcUpaS3BObApLOE42WFhPTFcyUUFpeFBaemNURFhMRXBvR2lXd2l1eUIzNU4vMUhHQ2FmS2g4NjNSUjNmN2pxR2JNYk9VcUppClVXaFN4V0xtZWhrMFVoOU5rdnNBVnRURDAzTUgyeFFJN1FmT1IxVUNnWUFrRUovS3NhK21QL2taanJoYTk5ZTEKVDdmNDdMZ0QycXRzTUY4YW05OG5saC9SSG83bzRsVFRPbXdKaWlUTFp3d3lMajFRbnBrL2QxWXJBVEdKSGxPMApwSVRoYUFpZnBNRXlra2JEZ1JsTUZ1dCtFc0dudnpiUUJHSWxOdmdINCt3REV5dE50eHZYRlRlRDBWUmVMbm1sCis4ZGRySUw5UDRMQWYyQlEzMjExQVFLQmdRRDYwaXRpakd3bzlpVU8wUGd6TkN2QXJvV00wd2xjdHJEcjFCT3UKekxta1pzL3R1bE1iWXVSZ01QU1R3dDlmMUZNUmpTYk1BVUt0MU5tTGNzNnFWQmVHTXNianBmakNwMzVIMVdnRQp4WURKQ1d1NVo0NW5YT2dQS2NiOUV3NHJRZGg5V0lxVGRNZHd3L1U0WFpQZWlla216WUpuSEFJL2hBUXgrODVWClVrWU94UUtCZ0dGRE5ZTGx5TEN5dHl3KzFFVlIwYk54bHQ1QXYwcWRqZS8yUGJGRHN6dTdwS3czYVBFa3FoazgKbjdKSGdYcHhBRkJnUSs0amQrL0NxdVpCeDd4MjZLWVUvVjVaYjZzdXRnYVRUWk1LRFVZclBPVVVaNkFyRW94LwpzZW9XbUJUUG9oWGVYOTZKK0c2VkgwME84YVplLzBId1c2ZVErOVNtakUxQVU4RVhORkxqCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU1FZjlyWENTeU9aZWRWUWc1OGh6dW93RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMApNREV4TnpJM05USmFGdzB5TWpBME1ERXhOekkzTlRKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFETGxxalE4OUhjR3pRSW5ETzQweUNLYjIxVmVOS2Q0cE1RcHovS1ovdWh3RCt1bDRZVm1KQVkzcTJ1TVFVMgo2MnBPUHFYRE5rZTFQQnlvWEhwT1Q2Tm9acVY5RElQWXVxOE43dXlra0d5eUNTMzdWZ3M4NGQxVHZ4WC9Vck1iCnB6bkZyZG9oOFl4MVRVZTc3VzJzWldKQ0x5alRFbUZNaU9Rb1F2bVMwK0tTT081L0YvemQxV3h6Q25KNVVLWnEKeXpCZXNvakNDYWhZWVJTRUdoNDE3S1diSFhiWVgwaVV1SmY0a05RckFNWUlMWnB6RHc3MFl4b2JhMDlUQWRnMQozaEdINEVFV0RpUWNReVMya2wwUFpHV2xGanJ4OG4ydFdNK1hDbUZCS3IzWmw5S1hSMkRSOXlEUXpoVTJTM080CmFpR0E0cGpLbkRKSk10VmxLOURjNGkvbEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURKanYzSzdNZDRqcTQ2TzBjUXczU0ZnbitpZ0ViRXNYTTZJRmlLNlpkaHMxRCt4L0lFYllvMWxnVzIKS3JzRW1pSWRvNThQb0R0a1g5RjBTZ0ZpVEQ2aUJYdEpVOHFoSjVRbUV6dUQzT3U2YnZ2bGYzTUtVY2txa0tkNgpnUDZ2MmJ0WnBzMWJEbm9mS2ZsM3NDM0tZa3Y2QWc3UUpMQk10OXBxRW82SlJmdVBLajgycFlSd2IzUGxPQ3dNCnR1VUwxUEEzM0RkL3JhaE9EVnNuSnpzNWtkM3AwcDZXN21uM1dxSVRDSFpCSitWU3R6azVBdFRQNElmRlNya0wKNVdJSGFzL1pKKy9XdUQwQ2hEWnFUM0lrNHBXYlpGaFBKUVdGdmNpMkFrSFY5Zmd5TDlhMzMzR0tObklhUjIycwpTNnZiMml6R3EreUg3cDRoL04ybk5MSTBSVVNmCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 4ccbbb3917f2be1da4927ca09ddeecc8e6f24a8a78e63ba0bdd569fc418f8541
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
