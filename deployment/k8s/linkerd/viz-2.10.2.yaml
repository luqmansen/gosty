---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
  - apiGroups: [ "extensions", "apps" ]
    resources: [ "daemonsets", "deployments", "replicasets", "statefulsets" ]
    verbs: [ "list", "get", "watch" ]
  - apiGroups: [ "extensions", "batch" ]
    resources: [ "cronjobs", "jobs" ]
    verbs: [ "list" , "get", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods", "endpoints", "services", "replicationcontrollers", "namespaces" ]
    verbs: [ "list", "get", "watch" ]
  - apiGroups: [ "linkerd.io" ]
    resources: [ "serviceprofiles" ]
    verbs: [ "list", "get", "watch" ]
  - apiGroups: [ "split.smi-spec.io" ]
    resources: [ "trafficsplits" ]
    verbs: [ "list", "get", "watch" ]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
  - kind: ServiceAccount
    name: metrics-api
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
  - apiGroups: [ "" ]
    resources: [ "nodes", "nodes/proxy", "pods" ]
    verbs: [ "get", "list", "watch" ]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups: [ "" ]
    resources: [ "pods", "services", "replicationcontrollers", "namespaces", "nodes" ]
    verbs: [ "list", "get", "watch" ]
  - apiGroups: [ "extensions", "apps" ]
    resources: [ "daemonsets", "deployments", "replicasets", "statefulsets" ]
    verbs: [ "list", "get", "watch" ]
  - apiGroups: [ "extensions", "batch" ]
    resources: [ "cronjobs", "jobs" ]
    verbs: [ "list" , "get", "watch" ]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
  - apiGroups: [ "" ]
    resources: [ "namespaces" ]
    verbs: [ "list" ]
  - apiGroups: [ "tap.linkerd.io" ]
    resources: [ "*" ]
    verbs: [ "watch" ]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRS2c0UWhtQW1PTjZOZ0dpTFhLWjJEakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURZd09EQXdNRFl3TUZvWApEVEl5TURZd09EQXdNRFl3TUZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHVoM0ZiK2lNZ2J3Yzg3dUVCSis0amcKdXR3dGdTcW1wOW1sZHcvdlhkRXhVY0gzSWdBSzdleEFQRmQ3eDE3OG5BVlpIb2tvUm03S0o2Y3p5L0s0WWNGSgpMV0kvSHR2TlhkTUVzU1Y1dGFQbFBJVS9wNUR0MGZTTWdZWDdmcEZFaG03ZHc4WXRvV2JzaDRBR05kbGNZUU9yCnQ4NVlyWllwQ2pLUnlOMlY1dWpxckNYMEowZUxpTVBuZnVXZ0l2Qy9ZekgzemNudmpkUVkwR1FmQk1ORWk5K2MKYTc5QUxwa2ZhWVpCRkNyKzBWTWxjS2h5NEU1TFdUOThLZXg0eDliU3hZd1RtemVrU0ZkQzNlazh3Q3VwTmxGLwo4N1BiWitJR2pCQ3A0ZzFvTUdJZFMrVUdPbkU0MjU3MGpyakxDRmthY3pYQ09yNTM4M3M1V2Yya3RvcDd5WXNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHSUxraXN6U1RPbksrQ1ZuRy9ob1RtTWlsNEFFUlRUCjBtWGkvMElGYmw0WERSQ05LbjFVaWJGMzVrcDdBZHJteWRjT0JmZXJhemtYTTYzNUxSeVpyVFNZZTBpYTl2VEkKRG1sT0ZJdjJZd3JVT1M1ZGI0K2U1Z3E0ZUlYRENuRnBsSnpaNU8rWkN1bHh3eXR3UzBld0JiT2tVRkVURmlRWQpTY0wzVks1RzlGbGV6eUV1ZnNHR01ualdBNnhsL0kzLzJ1bjY0UmVENWpNNXRzMmdHOElubUt6VVJPcG11T250Cm5FRHQ2RnBldEpjLzlacjhpR1FUZE43QWh5MTFJOXRoelJEMzNiYmEwMS9JNFVsbXZha0hhQ0pEZ3RPRElGQkIKMGE2WTdLN3NpVGZjT0RzU2NLRFVBd1Z1UGlGbXRwOW1HZzJRT2dPUkphNFVBODkzRmpyVzFiUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdTZIY1Z2Nkl5QnZCenp1NFFFbjdpT0M2M0MyQktxYW4yYVYzRCs5ZDBURlJ3ZmNpCkFBcnQ3RUE4VjN2SFh2eWNCVmtlaVNoR2Jzb25welBMOHJoaHdVa3RZajhlMjgxZDB3U3hKWG0xbytVOGhUK24Ka08zUjlJeUJoZnQra1VTR2J0M0R4aTJoWnV5SGdBWTEyVnhoQTZ1M3psaXRsaWtLTXBISTNaWG02T3FzSmZRbgpSNHVJdytkKzVhQWk4TDlqTWZmTnllK04xQmpRWkI4RXcwU0wzNXhydjBBdW1SOXBoa0VVS3Y3UlV5VndxSExnClRrdFpQM3dwN0hqSDF0TEZqQk9iTjZSSVYwTGQ2VHpBSzZrMlVYL3pzOXRuNGdhTUVLbmlEV2d3WWgxTDVRWTYKY1RqYm52U091TXNJV1Jwek5jSTZ2bmZ6ZXpsWi9hUzJpbnZKaXdJREFRQUJBb0lCQVFDcVlma3NKa2NmTDlWMgowY3dtMVFmTTdBWERHcTlJZzcyNExrRkgveDA2Y1liRWxCNFQyOWpoeUJNRGZpczFYajV2dk5XMXh4VHVWalJiCjZQVXltNnhwVUlJZHpTUEFoV1RGMG1UcW12TU91WU9UbkpJVlVXQnVxWWlVbWlQODFqVWRSOVFYaWlnZXhucmwKRHI2bmV2TzkyWmszajk5UmxFTG1XT3dHQzdGN25zMlhVMGppWnVOU0tHK0QyUFphOUwwdmZ0Y1ZLRjlXUk11aApzaEJtOUZVTC9hWldTdTk3TVRVMENMa01WWHlRWndNZjBFZzFDUldyTlB3V3RvRVJFR2pFQkltOFQ2YnY2ZkR5Cnl6ZTJUUFdjTFhicU1jQzVXcENEazVuaThTYXJtSlhONlk0Y0dNOFI4SlltYkNYd3JOdlljZWpSMUE3S2V5bGgKZWVrUWlYV0JBb0dCQU1MVjNnaG81WTZUYzAyWkFsMnNVRmVPeGFLV3YxWTJjVUNqd1hybWRKeVBzMFJ4bjl0cApkT1hucDdSVnRlTlI4Q05jcXQvR3ZmZmN1MzJrNHJIckV0N0tQZUh3RVZKRENhbHEwdU1UdHBzNk0valZSb00xCk9mT0tvZGp4cDFzL25ZeU5RZ0c5TzRXbDRHL3BVbE5acWY0d21NQmpLN0lYanpzazJDSEM2QzdwQW9HQkFQYUoKR3ZqUmtvSmJvRlpwcUxSYWc0Vk43K1VlRDV2TWNGSHpwcWhaS1VucnVPVnJXcFF6YWdXbEFrZEdWckR1S1kxRwpkNHM1OGVQTEhkVWxpbG9HeXNTaWRpcjZMRGxLTnNyYjl4V3lYOGc4ZS9rZHFIOEtGRTRQczNWeWtKUUo5ekNSCm5pMTF4bTdnVmtNZTR5bXNIT0hoZkRPd3NNWVh6ek9MTHVPS2UzUlRBb0dBUzB6L0NEOEtZYVZKVGZkUis4UXEKTlB6Z0UydXh2VzlETEJsZUlOTEt4T3VnL0ZYeDA0b1pmUFdnVWtsQ0IvNVdFa1N4WWRWYy9GdmFOc0F3UVZVNgpNTkwzUWNoWDJYUkJXcklIbVcyNENKeGhFODNSOThudGdOdldtNU1oL0ZsRTJkcUtaVU91cW9PbWozb2NzRXdhCk1EeTEvTDBYV1RoVHlpYitSV1lmK0drQ2dZQVlNQytEUmh5WHlhR2JtTlpDaTdibnQxUFlLUERqR2xYUzFKTC8KWlhBVm5wa1BlVTd6eDIrWmlpMEZEVE9vUEZXN1ZMU1o1bCtET0FSL1N5V2QyNWk5WGlzMTRFSENoVE9IQjduZwpXUlhvc1hhQVpKYUprRldacXhTeWEwRWdKVElwZzcvL09kVDBQL0oydDJzV1JacTMxc1cyMUpramRtYVA2aEg1CnBUYWpuUUtCZ0JFM3lUSFlPaUg2VVRtcllxVmlZVFdkamlMUlFYbWRpdnoxRitSRThQRW5iWTkvUDdnNUpPN1MKZEpCVjZoQjg4Tmp2Zml0SlJVTzJOc1Z1TUI2cGtJdmNJcmx0NHBJMkI0b2tTR3drS1YrOHlhcjR4WXNWOVhJRwpjdXU1aWtsRkFWY3p2eTA0MllkQ2xEMHF3cFlyQ0ltSGxXcUV3cHFrNVNrMGpHVzVUd2Z2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRS2c0UWhtQW1PTjZOZ0dpTFhLWjJEakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURZd09EQXdNRFl3TUZvWApEVEl5TURZd09EQXdNRFl3TUZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHVoM0ZiK2lNZ2J3Yzg3dUVCSis0amcKdXR3dGdTcW1wOW1sZHcvdlhkRXhVY0gzSWdBSzdleEFQRmQ3eDE3OG5BVlpIb2tvUm03S0o2Y3p5L0s0WWNGSgpMV0kvSHR2TlhkTUVzU1Y1dGFQbFBJVS9wNUR0MGZTTWdZWDdmcEZFaG03ZHc4WXRvV2JzaDRBR05kbGNZUU9yCnQ4NVlyWllwQ2pLUnlOMlY1dWpxckNYMEowZUxpTVBuZnVXZ0l2Qy9ZekgzemNudmpkUVkwR1FmQk1ORWk5K2MKYTc5QUxwa2ZhWVpCRkNyKzBWTWxjS2h5NEU1TFdUOThLZXg0eDliU3hZd1RtemVrU0ZkQzNlazh3Q3VwTmxGLwo4N1BiWitJR2pCQ3A0ZzFvTUdJZFMrVUdPbkU0MjU3MGpyakxDRmthY3pYQ09yNTM4M3M1V2Yya3RvcDd5WXNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHSUxraXN6U1RPbksrQ1ZuRy9ob1RtTWlsNEFFUlRUCjBtWGkvMElGYmw0WERSQ05LbjFVaWJGMzVrcDdBZHJteWRjT0JmZXJhemtYTTYzNUxSeVpyVFNZZTBpYTl2VEkKRG1sT0ZJdjJZd3JVT1M1ZGI0K2U1Z3E0ZUlYRENuRnBsSnpaNU8rWkN1bHh3eXR3UzBld0JiT2tVRkVURmlRWQpTY0wzVks1RzlGbGV6eUV1ZnNHR01ualdBNnhsL0kzLzJ1bjY0UmVENWpNNXRzMmdHOElubUt6VVJPcG11T250Cm5FRHQ2RnBldEpjLzlacjhpR1FUZE43QWh5MTFJOXRoelJEMzNiYmEwMS9JNFVsbXZha0hhQ0pEZ3RPRElGQkIKMGE2WTdLN3NpVGZjT0RzU2NLRFVBd1Z1UGlGbXRwOW1HZzJRT2dPUkphNFVBODkzRmpyVzFiUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
  - apiGroups: [ "" ]
    resources: [ "configmaps" ]
    verbs: [ "get" ]
    resourceNames: [ "linkerd-config" ]
  - apiGroups: [ "" ]
    resources: [ "namespaces", "configmaps" ]
    verbs: [ "get" ]
  - apiGroups: [ "" ]
    resources: [ "serviceaccounts", "pods" ]
    verbs: [ "list" ]
  - apiGroups: [ "apps" ]
    resources: [ "replicasets" ]
    verbs: [ "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups: [ "rbac.authorization.k8s.io" ]
    resources: [ "clusterroles", "clusterrolebindings" ]
    verbs: [ "list" ]
  - apiGroups: [ "apiextensions.k8s.io" ]
    resources: [ "customresourcedefinitions" ]
    verbs: [ "list" ]
  - apiGroups: [ "admissionregistration.k8s.io" ]
    resources: [ "mutatingwebhookconfigurations", "validatingwebhookconfigurations" ]
    verbs: [ "list" ]
  - apiGroups: [ "policy" ]
    resources: [ "podsecuritypolicies" ]
    verbs: [ "list" ]
  - apiGroups: [ "linkerd.io" ]
    resources: [ "serviceprofiles" ]
    verbs: [ "list" ]
  - apiGroups: [ "apiregistration.k8s.io" ]
    resources: [ "apiservices" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
  - apiGroups: [ "" ]
    resources: [ "namespaces" ]
    verbs: [ "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: tap
    namespace: linkerd-viz
  - kind: ServiceAccount
    name: web
    namespace: linkerd-viz
  - kind: ServiceAccount
    name: grafana
    namespace: linkerd-viz
  - kind: ServiceAccount
    name: prometheus
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
    - name: http
      port: 8085
      targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - args:
            - -controller-namespace=linkerd
            - -log-level=info
            - -cluster-domain=cluster.local
            - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
          image: cr.l5d.io/linkerd/metrics-api:stable-2.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: metrics-api
          ports:
            - containerPort: 8085
              name: http
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          securityContext:
            runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - env:
            - name: GF_PATHS_DATA
              value: /data
            # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
            # see https://github.com/grafana/grafana/issues/20096
            - name: GODEBUG
              value: netdns=go
          image: cr.l5d.io/linkerd/grafana:stable-2.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: http
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          securityContext:
            runAsUser: 472
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/grafana
              name: grafana-config
              readOnly: true
      serviceAccountName: grafana
      volumes:
        - emptyDir: { }
          name: data
        - configMap:
            items:
              - key: grafana.ini
                path: grafana.ini
              - key: datasources.yaml
                path: provisioning/datasources/datasources.yaml
              - key: dashboards.yaml
                path: provisioning/dashboards/dashboards.yaml
            name: grafana-config
          name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
    - name: admin-http
      port: 9090
      targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
        - args:
            - --log.level=info
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/data
            - --storage.tsdb.retention.time=15d
          image: prom/prometheus:v2.19.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          name: prometheus
          ports:
            - containerPort: 9090
              name: admin-http
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-config
              subPath: prometheus.yml
              readOnly: true
      serviceAccountName: prometheus

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: prometheus-pv-claim

        - configMap:
            name: prometheus-config
          name: prometheus-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: linkerd-viz
  name: prometheus-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Gi
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
    - name: grpc
      port: 8088
      targetPort: 8088
    - name: apiserver
      port: 443
      targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 763dc61a288eaf38e80f89e8d8c8b26ecd80b1a665d519826a2461f5b42cb316
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - args:
            - api
            - -api-namespace=linkerd
            - -log-level=info
            - -identity-trust-domain=cluster.local
          image: cr.l5d.io/linkerd/tap:stable-2.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9998
            initialDelaySeconds: 10
          name: tap
          ports:
            - containerPort: 8088
              name: grpc
            - containerPort: 8089
              name: apiserver
            - containerPort: 9998
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9998
          securityContext:
            runAsUser: 2103
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap
      volumes:
        - name: tls
          secret:
            secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
  - apiGroups: [ "" ]
    resources: [ "namespaces" ]
    verbs: [ "get", "list", "watch" ]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
  - kind: ServiceAccount
    name: tap-injector
    namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUltT3dxYW5JVFN1RStsU3NteVBnMEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMgpNRGd3TURBMk1ERmFGdzB5TWpBMk1EZ3dNREEyTURGYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEZ3ZmNFpHTm41a1NkbGV6bWdIbGNaYzg3Q3FIRjVoTDV2ZWZ6WEhUWUNHUE81M3QwcVNLdGY0b2RxK2J4dApVcGtYRkdNSUQ0UkxtbCtKQ2hXek1TYlBldEJKN0ZSZGloekp1L1lFSUp1TFhjWUlKWnJaY0RVVGdRcDk5MHJHCmV3Y1Y2ajdYYnlNZTNidnNEbXRYU1d4ZU1BOUV0bEFReWNPOWNkL1BRVGJDUUkvR2ZFNjFpUWFLYmNQTkxycXQKZzltRUNQYlZnZzRaZmRmbzBmT0hQRTlPeFB6Z1lGOTE0emQ2N3VGYUlEM0NoYlVFQ2tkVnlhZmpiQ20rdUZoRgpQM3FjZ2RCMXp3Qi96S3ZpNm1RNmR5QnhMeElEbElBSnJXUTM2VDlkeGpNajBFb3d6am55bkpZQ2RXQ0llamlRCjJmMWN6RUxVSVpZYzNNR1J0bEZsRFdqOUFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFST3oxTmUrR3JnUGpOWVNiU24xemFQeTVKR0VUNmFQYW9KQ1Z3RE5IUXkzVlFsT0J6ajZLaWtaa3UKUldqZFpYc0p3cWtNM3FidE9ubXdHWVVVdmJNWDJnVWVaZzM3bDluTmlaSTJJSWUwT2lNWmlVWkx6Qm5pUU1Bbwoxblc4QXJPK09Td0FzaDBxLzlVYjZjWXpETG10aVhOTXh6bDB4UFY0aDJJYnFtTFA4c2tlSUVUQzBNbzBTckFmCmx6dGQ5RTJaOTZCM1VsVVVyZFVteDJsRGxXZk1JOWNRVy9EVk1ET2t1aVk2L29iK3lIakRwYi9xWklpbS8zbEwKSUJmRWpkWGkvY2VISU9hK3hDOW84NnYySzJNWk9LNXVTMXlxU08xeHh5OGpZcHlCUXpTOFFLMWxRcUsveWFWdAorZThPUFRIcXgvaURFVlhVWHZEbDMyM0VrNGVvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNEwzK0dSalorWkVuWlhzNW9CNVhHWFBPd3FoeGVZUytiM244MXgwMkFoanp1ZDdkCktraXJYK0tIYXZtOGJWS1pGeFJqQ0ErRVM1cGZpUW9Wc3pFbXozclFTZXhVWFlvY3lidjJCQ0NiaTEzR0NDV2EKMlhBMUU0RUtmZmRLeG5zSEZlbysxMjhqSHQyNzdBNXJWMGxzWGpBUFJMWlFFTW5EdlhIZnowRTJ3a0NQeG54Twp0WWtHaW0zRHpTNjZyWVBaaEFqMjFZSU9HWDNYNk5Iemh6eFBUc1Q4NEdCZmRlTTNldTdoV2lBOXdvVzFCQXBIClZjbW40MndwdnJoWVJUOTZuSUhRZGM4QWY4eXI0dXBrT25jZ2NTOFNBNVNBQ2Exa04ray9YY1l6STlCS01NNDUKOHB5V0FuVmdpSG80a05uOVhNeEMxQ0dXSE56QmtiWlJaUTFvL1FJREFRQUJBb0lCQUZLaWFTaVBNNjZJeWFTTgpyMzJKU2x0SWNwQ3VZTExldFNyRi9zcVZxZ01SYTZRL0pyRGljV2piSVJHYmE4WUNwZG1Qbkc0ZFRuYUI5M2lxCjVabXlpK09qODZ3S29tYVdYc2xxUENYK1cxTGVFdTl4N0VMZytCTUkwblBJbG96dU5ZZkFUb1RtRDFMTkVzalQKOEhIeXhFN0pld08zeVM2ekVTNjZEU0htaDV6YWNiem5QMEUvaTYwMU5ycVRKTkFpYURrZlZmUnNGSlBSYWk3Zgo4NExFL24rbEhoTDBvNGxkY1AvSVlGVDNyWksrb29ZREt3eHh1TThqSXRCTjk2b01mLzVCWVhMUVM2Um45cHFiCnhLcmYvZDBRYng3ODhJQXFkZHJjMHRuUUhLbDErQ25pYUxCdWJPVFMvTzJYT0g5UU5Va2lQWm8zcE81YkJQbXoKSzVPV1p1RUNnWUVBK1YyS1R5WFNueGFhRTk2WjhjZ1JpQXVZQndCVHNSNGxxYWtDVk94ckcwYUpyOHh2ZFFZSQpPbjFNa2VHVTNPcFpjNFVkblRqd2JKNG9nYzZBY1N5L0RjY0tWYXF6VG1BKzkxbVBOUWxJcUQ4bDZoUVpmVzBoCkcvOUhrSGpNaWhBY3kraXNicGFiKyszd3NlWHBGd3dNbUNMQnFPNy9QaEZuUXVJZ08rQm1MUGtDZ1lFQTVyaTkKZy9BN01ON1BHK3ltSm9KMmdzVUMxT292RUhzK1hXL1Jkc2VFT0lwYTY1Z0IrT1ZTZlo3WVdpVGg2ZGZ5azZjZwp3SUw2Rm9rREs2V0w1NlhoYUtFa0VMYWczQUZTbFlVU0pLMnNpMGtqbzVTZ01DVEpmdTRUNFhUbE1iRW95enNpCkV6c0pJOUJyNDVhU05xK3BYUzVSWGwyTkwyaTBOcjYyZ1RhbmNTVUNnWUVBbHp4Ty9NK2duTkcxWXFXWDBoYVgKNDEyOHQwcFFkOVFqM1hEZU5Da3FrR0ZJY2pGWHk2NTc0UlZMRWhLeEdRYWNkNzVkQnBTWTVCZEwwK1lzNmZiTQpiSXV4emVENFhHbHM1dEVQVklncjQ3Wmd4VVdwYS9ONnFDTThBUGZ5ZlMxbWVaakVzMUZ1aXUxMUZEK3ZEVVpHCmdTSmJONXl6ZXE1TlpUZ0ZlcXNPN09rQ2dZQkk1OVdTN0lWM3N1QlZIWmwvRDdpdEo5MzJNNjM5a2tRcHVGekQKSU5hcUd5WVJ6aTNKWFlXTWhuWXRQZnhaTFZETTBZSHE4emhkaUp3RTNjSHd5QjBMTitneWs5TU8waWdyY1NwRApodEhBRGJPQ1RFTzJFdG5ORHlRZkdSWVhkcmpDUjRSRCtXS3crM29zSjNjNmFwV2xDUzdURjlLMlNXcXc1ZUM3CndlNTFOUUtCZ1FDUUJrckRjSkw3Wjk2L3Z0cnhhQ1cvYTVIeDJ5WFhCNUZUWjBPRG9wY0NQMFFXWnlvTDJpdFMKMjI3aUNKSUl4QjRsTnl5eHkxKzFYYmFhUnlWaG4rNU8xWGdSeWI1RlZuNlhMNGVyRWRJUFNnQ3J2TEVIRWJTSgp2TStEaDVYMGFJSjVwVllMbkh2dEhZTkVLZk1rWC9Uc3hSZCsxUXo4T2pNQzl6TnBJeCt3dUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
  - name: tap-injector.linkerd.io
    clientConfig:
      service:
        name: tap-injector
        namespace: linkerd-viz
        path: "/"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUltT3dxYW5JVFN1RStsU3NteVBnMEF3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMgpNRGd3TURBMk1ERmFGdzB5TWpBMk1EZ3dNREEyTURGYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEZ3ZmNFpHTm41a1NkbGV6bWdIbGNaYzg3Q3FIRjVoTDV2ZWZ6WEhUWUNHUE81M3QwcVNLdGY0b2RxK2J4dApVcGtYRkdNSUQ0UkxtbCtKQ2hXek1TYlBldEJKN0ZSZGloekp1L1lFSUp1TFhjWUlKWnJaY0RVVGdRcDk5MHJHCmV3Y1Y2ajdYYnlNZTNidnNEbXRYU1d4ZU1BOUV0bEFReWNPOWNkL1BRVGJDUUkvR2ZFNjFpUWFLYmNQTkxycXQKZzltRUNQYlZnZzRaZmRmbzBmT0hQRTlPeFB6Z1lGOTE0emQ2N3VGYUlEM0NoYlVFQ2tkVnlhZmpiQ20rdUZoRgpQM3FjZ2RCMXp3Qi96S3ZpNm1RNmR5QnhMeElEbElBSnJXUTM2VDlkeGpNajBFb3d6am55bkpZQ2RXQ0llamlRCjJmMWN6RUxVSVpZYzNNR1J0bEZsRFdqOUFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFST3oxTmUrR3JnUGpOWVNiU24xemFQeTVKR0VUNmFQYW9KQ1Z3RE5IUXkzVlFsT0J6ajZLaWtaa3UKUldqZFpYc0p3cWtNM3FidE9ubXdHWVVVdmJNWDJnVWVaZzM3bDluTmlaSTJJSWUwT2lNWmlVWkx6Qm5pUU1Bbwoxblc4QXJPK09Td0FzaDBxLzlVYjZjWXpETG10aVhOTXh6bDB4UFY0aDJJYnFtTFA4c2tlSUVUQzBNbzBTckFmCmx6dGQ5RTJaOTZCM1VsVVVyZFVteDJsRGxXZk1JOWNRVy9EVk1ET2t1aVk2L29iK3lIakRwYi9xWklpbS8zbEwKSUJmRWpkWGkvY2VISU9hK3hDOW84NnYySzJNWk9LNXVTMXlxU08xeHh5OGpZcHlCUXpTOFFLMWxRcUsveWFWdAorZThPUFRIcXgvaURFVlhVWHZEbDMyM0VrNGVvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
    failurePolicy: Ignore
    admissionReviewVersions: [ "v1", "v1beta1" ]
    reinvocationPolicy: IfNeeded
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [ "" ]
        apiVersions: [ "v1" ]
        resources: [ "pods" ]
    sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
    - name: tap-injector
      port: 443
      targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 34c808f487801de1d625c7d9fcfc26b0e5edec746bff6f62e15baf12769dc74a
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - args:
            - injector
            - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
            - -log-level=info
          image: cr.l5d.io/linkerd/tap:stable-2.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: tap-injector
          ports:
            - containerPort: 8443
              name: tap-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          securityContext:
            runAsUser: 2103
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      serviceAccountName: tap-injector
      volumes:
        - name: tls
          secret:
            secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: LoadBalancer
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
    - name: http
      port: 8084
      targetPort: 8084
    - name: admin-http
      port: 9994
      targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
        - args:
            - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
            - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
            - -cluster-domain=cluster.local
            - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
            - -controller-namespace=linkerd
            - -viz-namespace=linkerd-viz
            - -log-level=info
          image: cr.l5d.io/linkerd/web:stable-2.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9994
            initialDelaySeconds: 10
          name: web
          ports:
            - containerPort: 8084
              name: http
            - containerPort: 9994
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9994
          securityContext:
            runAsUser: 2103
      serviceAccountName: web
